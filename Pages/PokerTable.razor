@page "/pokertable"

@using Poker_Counter.Data
@using System;
@using System.Collections.Generic;

<button class="btn btn-primary" @onclick="AddPlayer">+</button>

<table class="table">
        <thead>
            <tr>
                <th></th>
                @foreach (var player in players) {
                    <th>#</th>
                    <th>#</th>
                    <td><input class="@CssClass" @bind="player.Name" /></td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var round in players.First().Rounds) {
                <tr>
                    <th>@round.MaxOrder</th>
                    @foreach (var player in players) {
                        <td><input class="@CssClass" @bind="round.Order" /></td>
                        <td><input class="@CssClass" @bind="round.Trick" /></td>
                        <td><input class="@CssClass" @bind="round.Score" readonly="True" /></td>
                    }
                </tr>
            }
        </tbody>
</table>

@code {
    const string cssClassEnabled = "form-control";
    const string cssClassDisabled = "form-control-plaintext";
    string cssClass = cssClassDisabled;
    [Parameter]
    public string CssClass
    {
        get => cssClass;
        set
        {
            if (cssClass == value)
                return;
            this.cssClass = value;
            StateHasChanged();
        }
    }

    private int rowCount;
    private List<Player> players;
    const int cardsCount = 54;

    protected override void OnInitialized()
    {
        players = new List<Player>(){
            new Player() { Name = "Name 1" },
            new Player() { Name = "Name 2" },
            new Player() { Name = "Name 3" },
            new Player() { Name = "Name 4" }
        };

        GenerateRounds();
    }

    private void AddPlayer()
    {
        players.Add(new Player() { Name = "Name " + (players.Count() + 1) });
        GenerateRounds();
    }

    void GenerateRounds() {
        foreach (var player in players) {
            RoundGenerator roundGenerator = new RoundGenerator();
            player.Rounds = roundGenerator.Generate(players.Count);
        }
    }
}